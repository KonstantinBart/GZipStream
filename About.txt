1. Запускаем обработчик нажатия Ctrl-C, который реализует завершение основного процесса.

2. Запускаем метод Start с обработчиком всех нижележащих исключений и выводом ошибок на экран.

3. В методе Start проводим валидацию аргументов и, с помощью видоизмененного паттерна "Команда", запускаем команду на выполнение.

4. Для компрессии используем CompressCommand:
- открываем исходный файл на чтение;
- создаем поток для сжатия GZipStream и передаем ему создаваемый для выходного файла поток на запись;
- вызываем метод обработки GZipHelper.Zip.

5. Для декомпрессии используем DecompressCommand:
- создаем поток для декомпрессии GZipStream и передаем ему создаваемый для исходного файла (архива) поток на чтение;
- открываем поток выходного файла на запись;
- вызываем метод обработки GZipHelper.Zip.

6. Для класса GZipHelper определяем: объект блокировки, семафор, очередь блоков, длину буфера = 4 Кб.

7. Процесс обработки для команды следующий:
а) GZipHelper.Zip:
- создается и запускается поток на запись;
- в бесконечном цикле читаем блок из исходного потока в буфер и помещаем этот буфер в очередь (в критической секции со сбросом семафора);
- после завершения чтения - помещаем в очередь null, как метку конца очереди.
б) GZipHelper.Write:
- получаем через параметр выходной поток;
- в бесконечном цикле получаем из очереди блок и помещаем его в буфер (в критической секции с блокировкой текущего потока с помощью семафора);
- пока не получим null, как метку конца очереди - записываем блок в выходной поток. 
